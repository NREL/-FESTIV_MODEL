=start
OBJECTIVE FUNCTION USED FOR MINIMIZATION
OBJECTIVEB(INTERVAL)
Q_DEV1(GEN) TO LIMIT ERRONEOUS DISPATCH CHANGES WHEN COSTS ARE EQUAL
Q_DEV2(GEN) TO LIMIT ERRONEOUS DISPATCH CHANGES WHEN COSTS ARE EQUAL
Q_LOAD_BALANCE(INTERVAL) EQUALS TOTAL GENERATION TO TOTAL LOAD    
Q_RESERVE_TOTAL(INTERVAL,RESERVETYPE)
Q_RESERVE_BALANCE(INTERVAL,RESERVETYPE) TOTAL RESERVE SCHEDULES GREATER EQUAL TO REQUIREMENT
Q_RESERVE_BALANCE2(INTERVAL,RESERVETYPE)
Q_GENTOTAL(GEN,INTERVAL) TOTAL BLOCK GENERATION EQUALS SCHEDULE
Q_GEN_BLOCK_LIMIT1(GEN,BLOCK,INTERVAL) FOR BLOCK 1
Q_GEN_BLOCK_LIMIT2(GEN,BLOCK,INTERVAL) FOR OTHER BLOCKS
Q_GEN_BLOCK_LIMIT3(GEN,BLOCK,INTERVAL) FOR BLOCK 1 FOR PU VARIABLE CAPACITY
Q_GEN_BLOCK_LIMIT4(GEN,BLOCK,INTERVAL) FOR OTHER BLOCKS FOR PU VARIABLE CAPACITY
Q_GENLIMIT_HIGH(GEN,INTERVAL) CAPACITY CONSTRAINT
Q_GENLIMIT_HIGH2(GEN,INTERVAL) CAPACITY CONSTRAINT WITH RESERVES TOO
Q_GENLIMIT_LOW(GEN,INTERVAL) MIN GEN CONSTRAINT
Q_GENLIMIT_LOW2(GEN,INTERVAL) MIN GEN CONSTRAINT WITH REGULATION
Q_RAMP_RATE_UP(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY FOR PERIOD GREATER THAN 2
Q_RAMP_RATE_DOWN(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY FOR PERIOD GREATER THAN 2
Q_VARIABLE_FORECAST(GEN,INTERVAL) WIND OR PV GENERATORS LIMIT BASED ON FORECASTS IS ADJUSTED EACH INTERVAL
Q_INTERFACE_SCHEDULE(GEN,INTERVAL) INTERFACE SCHEDULES EXACTLY AS SHOWN
Q_VARIABLE_RESERVE_CAPACITY(GEN,INTERVAL) IF WIND OR VG CAN PROVIDE RESERVES MUST BE BELOW FORECAST RATHER THAN NAMEPLATE
Q_PREDEFINED_INTERCHANGES DEFINE INTERCHANGE SCHEDULES
Q_PREDEFINED_INTERCHANGES2
Q_RESERVE_CAPABILITY(GEN,INTERVAL,RESERVETYPE) FLEXIBLE RESERVE
Q_RESERVE_RAMPUP_LIMIT(GEN,INTERVAL)
Q_RESERVE_RAMPDOWN_LIMIT(GEN,INTERVAL)
Q_RESERVE_CAPABILITY_VG(GEN,INTERVAL,RESERVETYPE) FLEXIBLE RESERVE FOR VG
Q_REGULATION_AND_DISPATCH_RAMP_SHARE_UP(GEN,INTERVAL) MAKE SURE RAMP ROOM FOR REGULATING
Q_REGULATION_AND_DISPATCH_RAMP_SHARE_UP1(GEN,INTERVAL) MAKE SURE RAMP ROOM FOR REGULATING
Q_REGULATION_AND_DISPATCH_RAMP_SHARE_DOWN(GEN,INTERVAL) MAKE SURE RAMP ROOM FOR REGULATING
Q_REGULATION_AND_DISPATCH_RAMP_SHARE_DOWN1(GEN,INTERVAL) MAKE SURE RAMP ROOM FOR REGULATING
Q_RESERVE_SUSD_TRAJECTORY(GEN,INTERVAL,RESERVETYPE)  CANT PROVIDE RESERVE IF STARTING OR STOPPING
Q_RAMP_RATE_UP0_BP(GEN,INTERVAL)
Q_RAMP_RATE_DOWN0_BP(GEN,INTERVAL)
Q_RAMP_RATE_UP0_ACTUAL(GEN,INTERVAL)
Q_RAMP_RATE_DOWN0_ACTUAL(GEN,INTERVAL)
=end
=start
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER1(BRANCH,INTERVAL) LOW LIMIT OF PHASE SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER2(BRANCH,INTERVAL) HIGH LIMIT OF PHASE SHIFTER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER3(BRANCH,INTERVAL) ADDING BOTH TO SHOW NEGATIVE
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER4(BRANCH,INTERVAL) FIXED PARS UPPER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER5(BRANCH,INTERVAL) FIXED PARS LOWER
$IFI '%NETWORK_CHECK%' == YES Q_PHASE_SHIFTER(BUS,INTERVAL) TURNING PHASE SHIFTER TO ENERGY INJECTION
$IFI '%NETWORK_CHECK%' == YES Q_HVDC(BUS,INTERVAL) FROM BUS OF HVDC SAME AS SINK AND TO BUS SOURCE
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSIONFLOW_PTDF(BRANCH,INTERVAL) USING PTDF INSTEAD OF LOAD FLOW
$IFI '%NETWORK_CHECK%' == YES Q_NETENERGY(BUS,INTERVAL) NET ENERGY LEAVING A BUS
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1(BRANCH,INTERVAL) TRANSMISSION LIMIT CONSTRAINT
$IFI '%NETWORK_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2(BRANCH,INTERVAL) TRANSMISSION LIMIT CONSTRAINT IN OTHER DIRECTION
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSIONFLOW_CTGC_LODF(BRANCH,BRANCH2,INTERVAL) PTDF AND LODF INSTEAD OF POWER FLOW
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT1_CTGC(BRANCH,BRANCH2,INTERVAL) TRANSMISSION LIMIT CONSTRAINT
$IFI '%CONTINGENCY_CHECK%' == YES Q_TRANSMISSION_CONSTRAINT2_CTGC(BRANCH,BRANCH2,INTERVAL) TRANSMISSION LIMIT CONSTRAINT IN OTHER DIRECTION
=end