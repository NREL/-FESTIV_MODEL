=start
Q_PUMP_HARD_HI(GEN,INTERVAL) USED FOR DIFFERENT PURPOSES BUT ENFORCING COMMITMENT ON BY INTERVAL
Q_PUMP_HARD_LO(GEN,INTERVAL) USED FOR DIFFERENT PURPOSES BUT ENFORCING COMMITMENT OFF BY INTERVAL
Q_STORAGE_GENERATING_START (GEN,INTERVAL) DEFINES THE AMOUNT OF ENERGY STORAGE AT THE BEGINNING OF THE DAY
Q_STORAGE_GENERATING(GEN,INTERVAL) STORAGE AMOUNT REDUCES DUE TO GENERATING AND INCREASES DUE TO PUMPING
Q_STORAGE_GENERATING_END(GEN,INTERVAL) STORAGE AT THE END OF PERIOD AFTER LAST INTERVAL
Q_STORAGE_END(GEN) TO ENFORCE ENDING STORAGE LEVEL
Q_GENPUMP(GEN,INTERVAL)   CANNOT GENERATE AND PUMP AT THE SAME TIME
Q_PUMPMAXLIMIT(GEN,INTERVAL) MAXIMUM PUMPING LIMIT
Q_PUMPMINLIMIT(GEN,INTERVAL) MINIMUM PUMPING LIMIT
Q_STORAGE_MAX(GEN,INTERVAL)  MAXIMUM AMOUNT OF STORAGE CAPABILITY
Q_RESERVE_LIMIT_LESR(GEN,INTERVAL) LESR ONLY PROVIDE REG
Q_PUMPMINLIMIT2(GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES
Q_PUMPMAXLIMIT2(GEN,INTERVAL) PUMPING CAPACITY WITH ANCILLARY SERVICES
Q_LESR_TOTAL_GEN(GEN,INTERVAL) TAKING OUT POSITIVE AND NEGATIVE COMPONENTS OF LESR SCHEDULE
Q_STORAGE_UNCONVENTIONAL_START(GEN,INTERVAL) STORAGE AMOUNT AT INTERVAL 1
Q_STORAGE_UNCONVENTIONAL1(GEN,INTERVAL) STORAGE AMOUNT REDUCES DUE TO GENERATING AND INCREASES DUE TO PUMPING
Q_STORAGE_UNCONVENTIONAL2(GEN,INTERVAL) UNCONVENTIONAL CANNOT GEN MORE THAN CAPACITY
Q_STORAGE_UNCONVENTIONAL3(GEN,INTERVAL) UNCONVENTIONAL CANNOT PUMP MORE THAN CAPACITY
Q_CSP_TOTAL_GEN(GEN,INTERVAL) TAKING OUT POSITIVE AND NEGATIVE COMPONENTS OF CSP AND SOLAR FORECAST
Q_STORAGE_RESERVE1(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR FOR INTERVAL 0
Q_STORAGE_RESERVE2(GEN,INTERVAL,RESERVETYPE) MAKE SURE STORAGE UNITS AREN'T PROVIDING RESERVES THAT AREN'T IN RESERVOIR
Q_MIN_PUMP_TIME(GEN,INTERVAL) MIN PUMP TIME CONSTRAINT
Q_MIN_PUMP_TIME2(GEN,INTERVAL) MIN PUMP TIME FOR ENDING INTERVALS
Q_PUMP_RAMP_RATE_DOWN(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY
Q_PUMP_RAMP_RATE_DOWN2(GEN,INTERVAL) RAMP DOWN RATE MUST BE LESS THAN CAPABILITY FOR INTERVAL 0
Q_PUMPUP(GEN,INTERVAL) TO DETERMINE STARTUP SHUTDOWN VARIABLES
Q_PUMPUP2(GEN,INTERVAL) TO DETERMINE STARTUP SHUTDOWN VARIABLES FOR INTERVAL 0
Q_PUMPUP3(GEN,INTERVAL) MAKE SURE CANNOT SU AND SD SIMULATANEOUSLY. COSTS WILL USUALLY DRIVE THESE DOWN IF THEY ARE NOT NECESSARY ANYWAY
Q_STORAGE_PUMP_EFFICIENCY1(GEN,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY2(GEN,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY3(GEN,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY4(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY5(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY6(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY7(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY8(GEN,INTERVAL)
Q_STORAGE_PUMP_EFFICIENCY9(GEN,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY1(GEN,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY2(GEN,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY3(GEN,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY4(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY5(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY6(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY7(GEN,EFFICIENCY_BLOCK,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY8(GEN,INTERVAL)
Q_STORAGE_GEN_EFFICIENCY9(GEN,INTERVAL)
=end
=start
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_RAMP_RATE_UP(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_RAMP_RATE_UP2(GEN,INTERVAL) RAMP UP RATE MUST BE LESS THAN CAPABILITY FOR INTERVAL 0
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY1(GEN,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY2(GEN,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPUP_TRAJECTORY0(GEN,INTERVAL)
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_GENLIMIT_LOW(GEN,INTERVAL) MIN GEN CONSTRAINT
$IFI NOT '%SUSD_TRAJECTORY_CHECK%' == YES Q_PUMP_GENLIMIT_LOW2(GEN,INTERVAL) MIN GEN CONSTRAINT WITH REGULATION
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_GENLIMITLOW_TRAJECTORY1(GEN,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_GENLIMITLOW_TRAJECTORY2(GEN,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_GENLIMITLOW_TRAJECTORY3(GEN,INTERVAL)
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RAMPDOWN_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RESERVE_TRAJECTORY1
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RESERVE_TRAJECTORY2
$IFI '%SUSD_TRAJECTORY_CHECK%' == YES Q_SU_PUMP_RESERVE_TRAJECTORY3
=end